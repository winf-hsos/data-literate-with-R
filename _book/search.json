[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Literate with R",
    "section": "",
    "text": "You can download the ZIP-archive with all material here. This archive includes:\n\n\n\nFolder\nContent\n\n\n\n\nbook\nThe compiled book in PDF format\n\n\ndata\nAll data from the chapters\n\n\ndocs\nAll chapters as single PDF files\n\n\nexercises\nAll exercises as PDF files (sometimes with solutions)\n\n\nscripts\nAll code from the chapters as plain R-Scripts (.R)\n\n\nslides\nA collection of slide decks in PDF format"
  },
  {
    "objectID": "book-parts/data-transformation.html",
    "href": "book-parts/data-transformation.html",
    "title": "Data Transformation",
    "section": "",
    "text": "This part introduces the basic tools for data transformation with R."
  },
  {
    "objectID": "documents/data-transformation/data-transformation-operations.html",
    "href": "documents/data-transformation/data-transformation-operations.html",
    "title": "1  Operations",
    "section": "",
    "text": "“Data is the new oil. Like oil, data is valuable, but if unrefined, it cannot really be used. It has to be changed into gas, plastic, chemicals, etc. to create a valuable entity that drives profitable activity. So, must data be broken down, analysed for it to have value.”\n\nIf we take this analogy seriously, the data, like oil, needs to be refined to turn it into something of value. Two important tools for refining data into a valuable output are data transformation and data visualization, both of which are the main focus of this book. In this part of the book, we first need to learn how to transform data so that we can apply visualization later on.\nTo learn how to transform data, we need to learn how to to the following operations:\n\nRemove any variables we don’t currently need (or specify those we do need)\nRemove any records we don’t currently need (or specify those we do need)\nAdd new variables that don’t exist yet\nSummarize many records into one or a few numbers\nChange the order of the records\n\nThe goal of the following chapters is to introduce means to perform theses five operations with R."
  },
  {
    "objectID": "documents/data-transformation/select-columns.html#the-select-command",
    "href": "documents/data-transformation/select-columns.html#the-select-command",
    "title": "\n2  Select columns\n",
    "section": "\n3.1 The select command",
    "text": "3.1 The select command\nThe function select() is the designated tool to select columns with dplyr. By passing different things to the function, we can efficiently define the set of columns in the resulting data frame."
  },
  {
    "objectID": "documents/data-transformation/select-columns.html#by-column-names",
    "href": "documents/data-transformation/select-columns.html#by-column-names",
    "title": "\n2  Select columns\n",
    "section": "\n3.2 By column names",
    "text": "3.2 By column names\nThe easiest and intuitive way to specify the columns we want is by listing their names. We can pass one or more column names to the select() function. In case of two or more, we use commas to separate the names:\n\n# Just one column name\norders %>% \n  select(order_id)\n\n# A tibble: 2,874 x 1\n        order_id\n           <dbl>\n 1 1130007101519\n 2 1130014965839\n 3 1130026958927\n 4 1130030563407\n 5 1130038853711\n 6 1130045964367\n 7 1130050519119\n 8 1130060283983\n 9 1130102194255\n10 1130106880079\n# ... with 2,864 more rows\n\n#> # A tibble: 2,874 x 1\n#>        order_id\n#>           <dbl>\n#> 1 1130007101519\n#> 2 1130014965839\n#> 3 1130026958927\n#> ...\n\n# A list of column names\norders %>% \n  select(order_id, total_price)\n\n# A tibble: 2,874 x 2\n        order_id total_price\n           <dbl>       <dbl>\n 1 1130007101519        94.7\n 2 1130014965839        32.2\n 3 1130026958927        30.2\n 4 1130030563407        32.2\n 5 1130038853711        30.2\n 6 1130045964367        30.2\n 7 1130050519119        30.2\n 8 1130060283983        32.2\n 9 1130102194255        96.7\n10 1130106880079        32.2\n# ... with 2,864 more rows\n\n#> # A tibble: 2,874 x 2\n#>        order_id total_price\n#>           <dbl>       <dbl>\n#> 1 1130007101519        94.7\n#> 2 1130014965839        32.2\n#> 3 1130026958927        30.2\n#> ...\n\nWhen we only want a few columns, this approach works fine and is usually a good choice. I expect you apply this method in more than 90% of all cases. However, there are cases when you’d wish there was something more flexible. Luckily, there is."
  },
  {
    "objectID": "documents/data-transformation/select-columns.html#by-name-patterns",
    "href": "documents/data-transformation/select-columns.html#by-name-patterns",
    "title": "\n2  Select columns\n",
    "section": "\n3.3 By name patterns",
    "text": "3.3 By name patterns\nNames starting with a string\nSometimes we want to select columns based on a pattern of their names. Take the orders data set as an example. Here, all variables that contain information about the shipping address have the prefix shipping. We leverage this with the helper function starts_with():\n\norders %>% \n  select(starts_with(\"shipping\")) %>% \n  colnames()\n\n[1] \"shipping_address_city\"      \"shipping_address_zip\"      \n[3] \"shipping_address_country\"   \"shipping_address_latitude\" \n[5] \"shipping_address_longitude\"\n\n#> [1] \"shipping_address_city\"      \"shipping_address_zip\"       \"shipping_address_country\"  \n#> [4] \"shipping_address_latitude\"  \"shipping_address_longitude\"\n\nNames ending with a string\nNames with a string anywhere\nUsing regular expressions"
  },
  {
    "objectID": "documents/data-transformation/select-columns.html#by-data-type",
    "href": "documents/data-transformation/select-columns.html#by-data-type",
    "title": "\n2  Select columns\n",
    "section": "\n3.4 By data type",
    "text": "3.4 By data type\n\norders %>% \n  select(where(is.numeric))\n\n# A tibble: 2,874 x 30\n        order_id order_~1 app_id curre~2 curre~3 curre~4 curre~5 total~6 total~7\n           <dbl>    <dbl>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 1130007101519     1014 580111    94.7    94.7       2       0       2    96.7\n 2 1130014965839     1015 580111    32.2    32.2       0       0       0    32.2\n 3 1130026958927     1016 580111    30.2    30.2       2       0       2    32.2\n 4 1130030563407     1017 580111    32.2    32.2       0       0       0    32.2\n 5 1130038853711     1018 580111    30.2    30.2       2       0       2    32.2\n 6 1130045964367     1019 580111    30.2    30.2       2       0       2    32.2\n 7 1130050519119     1020 580111    30.2    30.2       2       0       2    32.2\n 8 1130060283983     1021 580111    32.2    32.2       0       0       0    32.2\n 9 1130102194255     1022 580111    96.7    96.7       0       0       0    96.7\n10 1130106880079     1023 580111    32.2    32.2       0       0       0    32.2\n# ... with 2,864 more rows, 21 more variables: total_outstanding <dbl>,\n#   total_price <dbl>, total_tax <dbl>, total_tip_received <dbl>,\n#   location_id <dbl>, customer_id <dbl>, customer_accepts_marketing <dbl>,\n#   customer_is_hsos <dbl>, customer_orders_count <dbl>,\n#   customer_total_spent <dbl>, customer_last_order_id <dbl>,\n#   customer_verified_email <dbl>, customer_tax_exempt <dbl>,\n#   shipping_address_zip <dbl>, shipping_address_latitude <dbl>, ...\n\norders %>% \n  select(where(is.logical))\n\n# A tibble: 2,874 x 3\n   test  taxes_included customer_sms_marketing_consent\n   <lgl> <lgl>          <lgl>                         \n 1 FALSE TRUE           NA                            \n 2 FALSE TRUE           NA                            \n 3 FALSE TRUE           NA                            \n 4 FALSE TRUE           NA                            \n 5 FALSE TRUE           NA                            \n 6 FALSE TRUE           NA                            \n 7 FALSE TRUE           NA                            \n 8 FALSE TRUE           NA                            \n 9 FALSE TRUE           NA                            \n10 FALSE TRUE           NA                            \n# ... with 2,864 more rows\n\norders %>% \n  select(where(is.character))\n\n# A tibble: 2,874 x 27\n   name  discount_~1 finan~2 fulfi~3 sourc~4 landi~5 landi~6 note  tags  proce~7\n   <chr> <chr>       <chr>   <chr>   <chr>   <chr>   <chr>   <chr> <chr> <chr>  \n 1 B1014 DCBPXGJB1J~ paid    fulfil~ web     /passw~ <NA>    <NA>  <NA>  direct \n 2 B1015 <NA>        paid    fulfil~ web     /walle~ <NA>    <NA>  <NA>  express\n 3 B1016 KY0D5MNEZB~ paid    fulfil~ web     /       <NA>    <NA>  <NA>  express\n 4 B1017 <NA>        paid    fulfil~ web     /walle~ <NA>    <NA>  <NA>  express\n 5 B1018 DCBPXGJB1J~ paid    fulfil~ web     <NA>    <NA>    <NA>  <NA>  express\n 6 B1019 DCBPXGJB1J~ paid    fulfil~ web     <NA>    <NA>    <NA>  <NA>  express\n 7 B1020 DCBPXGJB1J~ paid    fulfil~ web     <NA>    <NA>    <NA>  <NA>  express\n 8 B1021 <NA>        paid    fulfil~ web     /       <NA>    <NA>  <NA>  express\n 9 B1022 <NA>        paid    fulfil~ web     /walle~ <NA>    <NA>  <NA>  express\n10 B1023 <NA>        paid    fulfil~ web     <NA>    <NA>    <NA>  <NA>  express\n# ... with 2,864 more rows, 17 more variables: payment_details_gateway <chr>,\n#   payment_details_credit_card_company <chr>,\n#   customer_marketing_opt_in_level <chr>, customer_gender <chr>,\n#   customer_state <chr>, customer_note <chr>, customer_tags <chr>,\n#   customer_last_order_name <chr>, campaign_tag <chr>,\n#   shipping_address_city <chr>, shipping_address_country <chr>,\n#   billing_address_city <chr>, billing_address_country <chr>, ...\n\norders %>% \n  select(where(is.factor))\n\n# A tibble: 2,874 x 0\n\norders %>% \n  select(where(is.list))\n\n# A tibble: 2,874 x 0\n\n# The package lubridate provides a function to check for date (without time)\norders %>% \n  select(where(lubridate::is.Date))\n\n# A tibble: 2,874 x 0\n\n# Select all date/time columns\norders %>% \n  select(where(lubridate::is.POSIXct))\n\n# A tibble: 2,874 x 8\n   created_at          updated_at          processed_at       \n   <dttm>              <dttm>              <dttm>             \n 1 2019-05-24 12:59:16 2019-06-19 13:23:26 2019-05-24 12:59:15\n 2 2019-05-24 13:09:08 2019-06-21 14:40:07 2019-05-24 13:09:07\n 3 2019-05-24 13:22:41 2019-06-21 12:35:23 2019-05-24 13:22:40\n 4 2019-05-24 13:27:43 2019-06-21 14:27:18 2019-05-24 13:27:42\n 5 2019-05-24 13:36:46 2019-06-21 12:11:57 2019-05-24 13:36:45\n 6 2019-05-24 13:44:41 2019-06-21 14:37:21 2019-05-24 13:44:41\n 7 2019-05-24 13:49:21 2019-06-21 12:25:16 2019-05-24 13:49:20\n 8 2019-05-24 13:59:57 2019-06-21 11:49:47 2019-05-24 13:59:57\n 9 2019-05-24 14:43:53 2019-06-19 14:12:38 2019-05-24 14:43:53\n10 2019-05-24 14:48:16 2019-06-21 15:54:24 2019-05-24 14:48:16\n# ... with 2,864 more rows, and 5 more variables:\n#   customer_accepts_marketing_updated_at <dttm>, customer_created_at <dttm>,\n#   customer_updated_at <dttm>, cancelled_at <dttm>, closed_at <dttm>"
  },
  {
    "objectID": "book-parts/data-visualization.html",
    "href": "book-parts/data-visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "This part introduces the basic tools for data visualization with R."
  }
]